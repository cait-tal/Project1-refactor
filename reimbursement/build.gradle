plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "3.3"
}

group = 'com.revature'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url 'https://repo.clojars.org'
		name 'Clojars'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.7'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.6.7'
	implementation 'org.modelmapper:modelmapper:3.1.0'
	testImplementation 'com.h2database:h2:2.1.212'
	developmentOnly 'org.springframework.boot:spring-boot-devtools:2.6.7'
	compileOnly 'org.projectlombok:lombok:1.18.24'
	runtimeOnly 'org.postgresql:postgresql:42.3.4'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.7'
	//testImplementation 'org.springframework.security:spring-security-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.7"
	reportsDirectory = layout.buildDirectory.dir('jacoco')
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "cait-tal_Project1-refactor"
		property "sonar.organization", "cait-tal"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.exclusions", "**/com/revature/reimbursement/model/*, " +
				"**/com/revature/reimbursement/exception/*," +
				"**/com/revature/reimbursement/dao/*, **/com/revature/reimbursement/dto/*," +
				"**/com/revature/reimbursement/aspect/*, **/com/revature/reimbursement/reimbursementApplication.java,"
	}
}

jar {
	manifest {
		attributes 'Main-Class': 'com.revature.main.ReimbursementApplication'
	}

	from {
		(configurations.runtimeClasspath).collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}

	duplicatesStrategy 'exclude'
}
